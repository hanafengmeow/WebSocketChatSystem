5d41b6a502ea27ae6975045b5089376c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
describe('JAR file deployment', () => {
    test('build/libs directory exists', () => {
        const jarPath = path.join(process.cwd(), '../build/libs');
        expect(fs.existsSync(jarPath)).toBe(true);
    });
    test('correct JAR file can be found (non-plain)', () => {
        const jarPath = path.join(process.cwd(), '../build/libs');
        if (!fs.existsSync(jarPath)) {
            console.warn('build/libs directory does not exist yet - run gradle build first');
            return;
        }
        const files = fs.readdirSync(jarPath);
        const jarFiles = files.filter(f => f.endsWith('.jar') && !f.includes('plain'));
        expect(jarFiles.length).toBeGreaterThan(0);
        expect(jarFiles[0]).toMatch(/WebSocketChatSystemPOC-.*\.jar/);
        expect(jarFiles[0]).not.toContain('plain');
    });
    test('plain JAR is excluded from deployment', () => {
        const jarPath = path.join(process.cwd(), '../build/libs');
        if (!fs.existsSync(jarPath)) {
            return;
        }
        const files = fs.readdirSync(jarPath);
        const plainJars = files.filter(f => f.endsWith('.jar') && f.includes('plain'));
        // Plain jar should exist but should be excluded by our deployment logic
        if (plainJars.length > 0) {
            console.log('Plain JAR found (will be excluded):', plainJars[0]);
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2NodWhhbi9Xb3Jrc3BhY2VzL1dlYlNvY2tldENoYXRTeXN0ZW1QT0MvY2RrL3Rlc3QvY2RrLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBRTdCLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7SUFDbkMsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtRQUN2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUMxRCxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUU7UUFDckQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFMUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUM1QixPQUFPLENBQUMsSUFBSSxDQUFDLGtFQUFrRSxDQUFDLENBQUM7WUFDakYsT0FBTztRQUNULENBQUM7UUFFRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRS9FLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7UUFDakQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFMUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUM1QixPQUFPO1FBQ1QsQ0FBQztRQUVELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEMsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRS9FLHdFQUF3RTtRQUN4RSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRSxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvY2h1aGFuL1dvcmtzcGFjZXMvV2ViU29ja2V0Q2hhdFN5c3RlbVBPQy9jZGsvdGVzdC9jZGsudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5kZXNjcmliZSgnSkFSIGZpbGUgZGVwbG95bWVudCcsICgpID0+IHtcbiAgdGVzdCgnYnVpbGQvbGlicyBkaXJlY3RvcnkgZXhpc3RzJywgKCkgPT4ge1xuICAgIGNvbnN0IGphclBhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJy4uL2J1aWxkL2xpYnMnKTtcbiAgICBleHBlY3QoZnMuZXhpc3RzU3luYyhqYXJQYXRoKSkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgdGVzdCgnY29ycmVjdCBKQVIgZmlsZSBjYW4gYmUgZm91bmQgKG5vbi1wbGFpbiknLCAoKSA9PiB7XG4gICAgY29uc3QgamFyUGF0aCA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnLi4vYnVpbGQvbGlicycpO1xuXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGphclBhdGgpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2J1aWxkL2xpYnMgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0IHlldCAtIHJ1biBncmFkbGUgYnVpbGQgZmlyc3QnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKGphclBhdGgpO1xuICAgIGNvbnN0IGphckZpbGVzID0gZmlsZXMuZmlsdGVyKGYgPT4gZi5lbmRzV2l0aCgnLmphcicpICYmICFmLmluY2x1ZGVzKCdwbGFpbicpKTtcblxuICAgIGV4cGVjdChqYXJGaWxlcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3QoamFyRmlsZXNbMF0pLnRvTWF0Y2goL1dlYlNvY2tldENoYXRTeXN0ZW1QT0MtLipcXC5qYXIvKTtcbiAgICBleHBlY3QoamFyRmlsZXNbMF0pLm5vdC50b0NvbnRhaW4oJ3BsYWluJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3BsYWluIEpBUiBpcyBleGNsdWRlZCBmcm9tIGRlcGxveW1lbnQnLCAoKSA9PiB7XG4gICAgY29uc3QgamFyUGF0aCA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnLi4vYnVpbGQvbGlicycpO1xuXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGphclBhdGgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhqYXJQYXRoKTtcbiAgICBjb25zdCBwbGFpbkphcnMgPSBmaWxlcy5maWx0ZXIoZiA9PiBmLmVuZHNXaXRoKCcuamFyJykgJiYgZi5pbmNsdWRlcygncGxhaW4nKSk7XG5cbiAgICAvLyBQbGFpbiBqYXIgc2hvdWxkIGV4aXN0IGJ1dCBzaG91bGQgYmUgZXhjbHVkZWQgYnkgb3VyIGRlcGxveW1lbnQgbG9naWNcbiAgICBpZiAocGxhaW5KYXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCdQbGFpbiBKQVIgZm91bmQgKHdpbGwgYmUgZXhjbHVkZWQpOicsIHBsYWluSmFyc1swXSk7XG4gICAgfVxuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9