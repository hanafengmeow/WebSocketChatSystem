{"file":"/Users/chuhan/Workspaces/WebSocketChatSystemPOC/cdk/test/cdk.test.ts","mappings":";;AAAA,yBAAyB;AACzB,6BAA6B;AAE7B,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACvC,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,eAAe,CAAC,CAAC;QAC1D,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACrD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,eAAe,CAAC,CAAC;QAE1D,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5B,OAAO,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAC;YACjF,OAAO;QACT,CAAC;QAED,MAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QAE/E,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;QAC9D,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACjD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,eAAe,CAAC,CAAC;QAE1D,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5B,OAAO;QACT,CAAC;QAED,MAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QAE/E,wEAAwE;QACxE,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,qCAAqC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/chuhan/Workspaces/WebSocketChatSystemPOC/cdk/test/cdk.test.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('JAR file deployment', () => {\n  test('build/libs directory exists', () => {\n    const jarPath = path.join(process.cwd(), '../build/libs');\n    expect(fs.existsSync(jarPath)).toBe(true);\n  });\n\n  test('correct JAR file can be found (non-plain)', () => {\n    const jarPath = path.join(process.cwd(), '../build/libs');\n\n    if (!fs.existsSync(jarPath)) {\n      console.warn('build/libs directory does not exist yet - run gradle build first');\n      return;\n    }\n\n    const files = fs.readdirSync(jarPath);\n    const jarFiles = files.filter(f => f.endsWith('.jar') && !f.includes('plain'));\n\n    expect(jarFiles.length).toBeGreaterThan(0);\n    expect(jarFiles[0]).toMatch(/WebSocketChatSystemPOC-.*\\.jar/);\n    expect(jarFiles[0]).not.toContain('plain');\n  });\n\n  test('plain JAR is excluded from deployment', () => {\n    const jarPath = path.join(process.cwd(), '../build/libs');\n\n    if (!fs.existsSync(jarPath)) {\n      return;\n    }\n\n    const files = fs.readdirSync(jarPath);\n    const plainJars = files.filter(f => f.endsWith('.jar') && f.includes('plain'));\n\n    // Plain jar should exist but should be excluded by our deployment logic\n    if (plainJars.length > 0) {\n      console.log('Plain JAR found (will be excluded):', plainJars[0]);\n    }\n  });\n});\n"],"version":3}